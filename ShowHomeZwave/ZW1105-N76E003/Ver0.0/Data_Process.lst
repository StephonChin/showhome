C51 COMPILER V9.52.0.0   DATA_PROCESS                                                      07/27/2017 17:01:48 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE DATA_PROCESS
OBJECT MODULE PLACED IN Data_Process.obj
COMPILER INVOKED BY: C:\Keil51\C51\BIN\C51.EXE Source\Data_Process.c BROWSE INCDIR(.\Include) DEBUG OBJECTEXTEND PRINT(.
                    -\Data_Process.lst) TABS(2) OBJECT(Data_Process.obj)

line level    source

   1          /*******************************************************************
   2            *
   3            * @FileName   Data_Process.c
   4            * @Date       2017.03.03
   5            * @Author     DS.Chin
   6            *
   7          *********************************************************************/
   8          #include "Data_Process.h"
   9          
  10          /* @Gloable Variables --------------------------------------*/
  11          _Flag NetChgFlag;
  12          
  13          
  14          /* @File Variables -----------------------------------------*/
  15          _Flag   TamperCloseFlag;
  16          _Flag   ConnectFlag;
  17          _Flag   SensorFlag;
  18          _Flag   PowerOnFlag;
  19          _Flag   NetPortFlag = TRUE;
  20          _Uint8  NetPortTime;
  21          
  22          enum
  23          {
  24            TAMPER_IDLE,
  25            TAMPER_CLOSE,
  26            TAMPER_OPEN
  27          }TamperStatus;
  28          
  29          enum
  30          {
  31            NET_IDLE,
  32            NET_CONNECT,
  33            NET_DISCONNECT
  34          }NetStatus,NetPreStatus;
  35          
  36          
  37          
  38          
  39          /***********************************************************************
  40            *
  41            * @FunctionName Power_On_Init
  42            *
  43          ***/
  44          void Power_On_Init(void)
  45          {
  46   1      //  /* To Check the device have or not connect to the net */
  47   1      //  if (PORT_DEV_ADD == SET)    NetStatus = NET_DISCONNECT;
  48   1      //  else                        NetStatus = NET_CONNECT;
  49   1        
  50   1        /* Tamper status check */
  51   1        if (PORT_TAMPER == RESET)   TamperStatus = TAMPER_CLOSE;
  52   1        else                        TamperStatus = TAMPER_OPEN;
  53   1        
  54   1        /* Check Sensor status */
C51 COMPILER V9.52.0.0   DATA_PROCESS                                                      07/27/2017 17:01:48 PAGE 2   

  55   1        if (PORT_SENSOR == RESET) SensorStatus  = SENSOR_OPEN;
  56   1        else                      SensorStatus  = SENSOR_CLOSE;
  57   1        
  58   1        NetPreStatus = NetStatus;
  59   1        PowerOnFlag = TRUE;
  60   1      }
  61          
  62          
  63          
  64          
  65          
  66          
  67          /***********************************************************************
  68            *
  69            * @FunctionName Data_Process
  70            *
  71          ***/
  72          void Data_Process(void)
  73          {
  74   1        static _Uint8 ShakeTime;
  75   1        static _Flag  ShakeFlag;
  76   1        
  77   1        
  78   1        /* Check the PORT_TAMPER after pulse occur */
  79   1        if (NetPortFlag == TRUE)
  80   1        {
  81   2          NetPortTime++;
  82   2          if (NetPortTime > 10) // > 100ms
  83   2          {
  84   3            NetPortFlag = FALSE;
  85   3            if (PORT_DEV_ADD == SET)    NetStatus = NET_DISCONNECT;
  86   3            else                      NetStatus = NET_CONNECT;
  87   3          }
  88   2        }
  89   1        else
  90   1        {
  91   2          NetPortTime = 0;
  92   2        }
  93   1        
  94   1        
  95   1        /* to check the net status, change mode to G-FAST when connected, & to */
  96   1        /* RGB-SLOWLY when disconnected */
  97   1        if (NetStatus != NET_IDLE)
  98   1        {
  99   2          ShakeTime++;
 100   2          if (ShakeTime > 2)
 101   2          {
 102   3            ShakeTime = 0;
 103   3            
 104   3            if (NetStatus == NET_CONNECT && PORT_DEV_ADD == RESET && NetPreStatus != NET_CONNECT)
 105   3            {
 106   4              ShakeFlag         = TRUE;
 107   4              ConnectFlag       = TRUE;
 108   4              LedData.ModeBuf   = LED_G_FAST;
 109   4              if (PowerOnFlag != TRUE)      
 110   4              {
 111   5                NetChgFlag = TRUE;
 112   5              }
 113   4              NetPreStatus = NetStatus;
 114   4            }
 115   3            else if (NetStatus == NET_DISCONNECT && PORT_DEV_ADD == SET && NetPreStatus != NET_DISCONNECT)
 116   3            {
C51 COMPILER V9.52.0.0   DATA_PROCESS                                                      07/27/2017 17:01:48 PAGE 3   

 117   4              ShakeFlag         = TRUE;
 118   4              ConnectFlag       = FALSE;
 119   4              LedData.ModeBuf   = LED_RGB_SLOW;
 120   4              NetPreStatus = NetStatus;
 121   4            }
 122   3      
 123   3            if (ShakeFlag == TRUE)
 124   3            {
 125   4              ShakeFlag = FALSE;
 126   4              
 127   4              // get mode & set init Flag
 128   4              LedData.Mode      = LedData.ModeBuf;
 129   4              LedData.InitFlag  = TRUE;
 130   4            }
 131   3            // clear status
 132   3            PowerOnFlag = FALSE;
 133   3            NetStatus = NET_IDLE;
 134   3          }
 135   2        }
 136   1        else
 137   1        {
 138   2          ShakeTime   = 0;
 139   2          ShakeFlag   = FALSE;
 140   2        }
 141   1      
 142   1        
 143   1        
 144   1        
 145   1        
 146   1        /* have not connect to the net , keep the mode as RGB flash slowly when */
 147   1        /* Tamper tirg. Keep Off mode when sensor trig */
 148   1        if (ConnectFlag == FALSE)
 149   1        {
 150   2          /* check the tamper status */
 151   2          if (TamperStatus != TAMPER_IDLE)
 152   2          {
 153   3            if (TamperStatus == TAMPER_CLOSE)
 154   3            {
 155   4              TamperCloseFlag = TRUE;
 156   4              LedData.ModeBuf = LED_RGB_OFF;
 157   4            }
 158   3            else
 159   3            {
 160   4              TamperCloseFlag = FALSE;
 161   4              LedData.ModeBuf = LED_RGB_SLOW;
 162   4            }
 163   3            
 164   3            // get mode & set init flag
 165   3            LedData.Mode      = LedData.ModeBuf;
 166   3            LedData.InitFlag  = TRUE;
 167   3            WakeUpMode        = 1;
 168   3            WakeUpInit        = TRUE;
 169   3              
 170   3            // clear status
 171   3            TamperStatus = TAMPER_IDLE;
 172   3          }
 173   2        }
 174   1        
 175   1        
 176   1        
 177   1        
 178   1        
C51 COMPILER V9.52.0.0   DATA_PROCESS                                                      07/27/2017 17:01:48 PAGE 4   

 179   1        /* when device connected to the net, change mode to B-SLOW when tamper trig */
 180   1        /* and to R-SLOW when tamper closed and sensor trig */
 181   1        else if (NetChgFlag == FALSE)
 182   1        {
 183   2          /* check the tamper status */
 184   2          if (TamperStatus != TAMPER_IDLE)
 185   2          {
 186   3            if (TamperStatus == TAMPER_CLOSE)
 187   3            {
 188   4              TamperCloseFlag = TRUE;
 189   4              LedData.ModeBuf = LED_RGB_OFF;
 190   4            }
 191   3            else
 192   3            {
 193   4              TamperCloseFlag = FALSE;
 194   4              LedData.ModeBuf = LED_B_SLOW;
 195   4            }
 196   3            
 197   3            // get the mode and set init flag
 198   3            LedData.Mode      = LedData.ModeBuf;
 199   3            LedData.InitFlag  = TRUE;
 200   3            WakeUpMode        = 1;
 201   3            WakeUpInit        = TRUE;
 202   3            
 203   3            // clear status
 204   3            TamperStatus = TAMPER_IDLE;
 205   3          }
 206   2          
 207   2          
 208   2          
 209   2          /* check the sensor status when tamper closed */
 210   2          if (TamperCloseFlag == TRUE)
 211   2          {
 212   3            if (SensorStatus != SENSOR_IDLE)
 213   3            {
 214   4              if (SensorStatus == SENSOR_CLOSE)   
 215   4              {
 216   5                SensorFlag    = TRUE;
 217   5                LedData.Mode  = LED_R_SLOW;
 218   5                TriggerMode   = 1;
 219   5              }
 220   4              else                                
 221   4              {
 222   5                SensorFlag    = FALSE;
 223   5                LedData.Mode  = LED_RGB_OFF;
 224   5                TriggerMode   = 0;
 225   5              }
 226   4              
 227   4              //get the mode and set init flag
 228   4              LedData.InitFlag  = TRUE;
 229   4              WakeUpMode        = 1;
 230   4              WakeUpInit        = TRUE;
 231   4              
 232   4              //clear status
 233   4              SensorStatus = SENSOR_IDLE;
 234   4            }
 235   3            else if (SensorFlag == TRUE)
 236   3            {
 237   4              if (LedData.Mode != LED_R_SLOW)
 238   4              {
 239   5                LedData.Mode      = LED_R_SLOW;
 240   5                LedData.InitFlag  = TRUE;
C51 COMPILER V9.52.0.0   DATA_PROCESS                                                      07/27/2017 17:01:48 PAGE 5   

 241   5              }
 242   4            }
 243   3          }
 244   2        }
 245   1      }
 246          
 247          
 248          
 249          
 250          
 251          
 252          /***********************************************************************
 253            *
 254            * @FunctionName   Interrupt_Process
 255            * 
 256          ***/
 257          void Interrupt_Process(void) interrupt 7
 258          {
 259   1        //Device Add
 260   1        if ((PIF & 0x20) == 0x20)
 261   1        {
 262   2          NetPortFlag = TRUE;
 263   2          NetPortTime = 0;
 264   2        }
 265   1        
 266   1        
 267   1        //Tamper
 268   1        if ((PIF & 0x80) == 0x80)
 269   1        {
 270   2          if (PORT_TAMPER == RESET)   TamperStatus = TAMPER_CLOSE;
 271   2          else                        TamperStatus = TAMPER_OPEN;
 272   2        }
 273   1        
 274   1        
 275   1        //Sensor
 276   1        if ((PIF & 0x10) == 0x10)
 277   1        {
 278   2      //    if (PORT_SENSOR == RESET) SensorStatus  = SENSOR_OPEN;
 279   2      //    else                      SensorStatus  = SENSOR_CLOSE;
 280   2        }
 281   1        
 282   1        
 283   1        
 284   1        
 285   1        //Clear
 286   1        PIF = 0x0;
 287   1      }
 288          
 289          
 290          /***********************************************************************
 291            *
 292            * @FunctionName   WKT_Interrupt
 293            * 
 294          ***/
 295          void WKT_Interrupt(void) interrupt 17
 296          {
 297   1        WKCON &= ~(BIT3 | BIT4);
 298   1        
 299   1        TrigForbidFlag = FALSE;
 300   1      }


C51 COMPILER V9.52.0.0   DATA_PROCESS                                                      07/27/2017 17:01:48 PAGE 6   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    352    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
