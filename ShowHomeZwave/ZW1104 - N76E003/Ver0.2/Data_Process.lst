C51 COMPILER V9.52.0.0   DATA_PROCESS                                                      07/07/2017 16:24:44 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE DATA_PROCESS
OBJECT MODULE PLACED IN Data_Process.obj
COMPILER INVOKED BY: C:\Keil51\C51\BIN\C51.EXE Source\Data_Process.c BROWSE INCDIR(.\Include) DEBUG OBJECTEXTEND PRINT(.
                    -\Data_Process.lst) TABS(2) OBJECT(Data_Process.obj)

line level    source

   1          /*******************************************************************
   2            *
   3            * @FileName   Data_Process.c
   4            * @Date       2017.03.03
   5            * @Author     DS.Chin
   6            *
   7          *********************************************************************/
   8          #include "Data_Process.h"
   9          
  10          /* @Gloable Variables --------------------------------------*/
  11          _Flag NetChgFlag;
  12          
  13          
  14          /* @File Variables -----------------------------------------*/
  15          _Flag TamperCloseFlag;
  16          _Flag ConnectFlag;
  17          _Flag SensorFlag;
  18          _Flag PowerOnFlag;
  19          
  20          enum
  21          {
  22            TAMPER_IDLE,
  23            TAMPER_CLOSE,
  24            TAMPER_OPEN
  25          }TamperStatus;
  26          
  27          enum
  28          {
  29            NET_IDLE,
  30            NET_CONNECT,
  31            NET_DISCONNECT
  32          }NetStatus,NetPreStatus;
  33          
  34          
  35          
  36          
  37          /***********************************************************************
  38            *
  39            * @FunctionName Power_On_Init
  40            *
  41          ***/
  42          void Power_On_Init(void)
  43          {
  44   1        /* To Check the device have or not connect to the net */
  45   1        if (PORT_DEV_ADD == SET)    NetStatus = NET_DISCONNECT;
  46   1        else                        NetStatus = NET_CONNECT;
  47   1        
  48   1        /* Tamper status check */
  49   1        if (PORT_TAMPER == RESET)   TamperStatus = TAMPER_CLOSE;
  50   1        else                        TamperStatus = TAMPER_OPEN;
  51   1        
  52   1        /* Check Sensor status */
  53   1        if (PORT_SENSOR == RESET) SensorStatus  = SENSOR_OPEN;
  54   1        else                      SensorStatus  = SENSOR_CLOSE;
C51 COMPILER V9.52.0.0   DATA_PROCESS                                                      07/07/2017 16:24:44 PAGE 2   

  55   1        
  56   1        NetPreStatus = NetStatus;
  57   1        PowerOnFlag = TRUE;
  58   1      }
  59          
  60          
  61          
  62          
  63          
  64          
  65          /***********************************************************************
  66            *
  67            * @FunctionName Data_Process
  68            *
  69          ***/
  70          void Data_Process(void)
  71          {
  72   1        static _Uint8 ShakeTime;
  73   1        static _Flag  ShakeFlag;
  74   1        
  75   1        /* to check the net status, change mode to G-FAST when connected, & to */
  76   1        /* RGB-SLOWLY when disconnected */
  77   1        if (NetStatus != NET_IDLE)
  78   1        {
  79   2          ShakeTime++;
  80   2          if (ShakeTime > 2)
  81   2          {
  82   3            ShakeTime = 0;
  83   3            
  84   3            if (NetStatus == NET_CONNECT && PORT_DEV_ADD == RESET && NetPreStatus != NET_CONNECT)
  85   3            {
  86   4              ShakeFlag         = TRUE;
  87   4              ConnectFlag       = TRUE;
  88   4              LedData.ModeBuf   = LED_G_FAST;
  89   4              if (PowerOnFlag != TRUE)      
  90   4              {
  91   5                NetChgFlag = TRUE;
  92   5              }
  93   4              NetPreStatus = NetStatus;
  94   4            }
  95   3            else if (NetStatus == NET_DISCONNECT && PORT_DEV_ADD == SET && NetPreStatus != NET_DISCONNECT)
  96   3            {
  97   4              ShakeFlag         = TRUE;
  98   4              ConnectFlag       = FALSE;
  99   4              LedData.ModeBuf   = LED_RGB_SLOW;
 100   4              NetPreStatus = NetStatus;
 101   4            }
 102   3      
 103   3            if (ShakeFlag == TRUE)
 104   3            {
 105   4              ShakeFlag = FALSE;
 106   4              
 107   4              // get mode & set init Flag
 108   4              LedData.Mode      = LedData.ModeBuf;
 109   4              LedData.InitFlag  = TRUE;
 110   4            }
 111   3            // clear status
 112   3            PowerOnFlag = FALSE;
 113   3            NetStatus = NET_IDLE;
 114   3          }
 115   2        }
 116   1        else
C51 COMPILER V9.52.0.0   DATA_PROCESS                                                      07/07/2017 16:24:44 PAGE 3   

 117   1        {
 118   2          ShakeTime   = 0;
 119   2          ShakeFlag   = FALSE;
 120   2        }
 121   1      
 122   1        
 123   1        
 124   1        
 125   1        
 126   1        /* have not connect to the net , keep the mode as RGB flash slowly when */
 127   1        /* Tamper tirg. Keep Off mode when sensor trig */
 128   1        if (ConnectFlag == FALSE)
 129   1        {
 130   2          /* check the tamper status */
 131   2          if (TamperStatus != TAMPER_IDLE)
 132   2          {
 133   3            if (TamperStatus == TAMPER_CLOSE)
 134   3            {
 135   4              TamperCloseFlag = TRUE;
 136   4              LedData.ModeBuf = LED_RGB_OFF;
 137   4            }
 138   3            else
 139   3            {
 140   4              TamperCloseFlag = FALSE;
 141   4              LedData.ModeBuf = LED_RGB_SLOW;
 142   4            }
 143   3            
 144   3            // get mode & set init flag
 145   3            LedData.Mode      = LedData.ModeBuf;
 146   3            LedData.InitFlag  = TRUE;
 147   3            WakeUpMode        = 1;
 148   3            WakeUpInit        = TRUE;
 149   3              
 150   3            // clear status
 151   3            TamperStatus = TAMPER_IDLE;
 152   3          }
 153   2        }
 154   1        
 155   1        
 156   1        
 157   1        
 158   1        
 159   1        /* when device connected to the net, change mode to B-SLOW when tamper trig */
 160   1        /* and to R-SLOW when tamper closed and sensor trig */
 161   1        else if (NetChgFlag == FALSE)
 162   1        {
 163   2          /* check the tamper status */
 164   2          if (TamperStatus != TAMPER_IDLE)
 165   2          {
 166   3            if (TamperStatus == TAMPER_CLOSE)
 167   3            {
 168   4              TamperCloseFlag = TRUE;
 169   4              LedData.ModeBuf = LED_RGB_OFF;
 170   4            }
 171   3            else
 172   3            {
 173   4              TamperCloseFlag = FALSE;
 174   4              LedData.ModeBuf = LED_B_SLOW;
 175   4            }
 176   3            
 177   3            // get the mode and set init flag
 178   3            LedData.Mode      = LedData.ModeBuf;
C51 COMPILER V9.52.0.0   DATA_PROCESS                                                      07/07/2017 16:24:44 PAGE 4   

 179   3            LedData.InitFlag  = TRUE;
 180   3            WakeUpMode        = 1;
 181   3            WakeUpInit        = TRUE;
 182   3            
 183   3            // clear status
 184   3            TamperStatus = TAMPER_IDLE;
 185   3          }
 186   2          
 187   2          
 188   2          
 189   2          /* check the sensor status when tamper closed */
 190   2          if (TamperCloseFlag == TRUE)
 191   2          {
 192   3            if (SensorStatus != SENSOR_IDLE)
 193   3            {
 194   4              if (SensorStatus == SENSOR_CLOSE)   
 195   4              {
 196   5                SensorFlag    = TRUE;
 197   5                LedData.Mode  = LED_R_SLOW;
 198   5                TriggerMode   = 1;
 199   5              }
 200   4              else                                
 201   4              {
 202   5                SensorFlag    = FALSE;
 203   5                LedData.Mode  = LED_RGB_OFF;
 204   5                TriggerMode   = 0;
 205   5              }
 206   4              
 207   4              //get the mode and set init flag
 208   4              LedData.InitFlag  = TRUE;
 209   4              WakeUpMode        = 1;
 210   4              WakeUpInit        = TRUE;
 211   4              
 212   4              //clear status
 213   4              SensorStatus = SENSOR_IDLE;
 214   4            }
 215   3            else if (SensorFlag == TRUE)
 216   3            {
 217   4              if (LedData.Mode != LED_R_SLOW)
 218   4              {
 219   5                LedData.Mode      = LED_R_SLOW;
 220   5                LedData.InitFlag  = TRUE;
 221   5              }
 222   4            }
 223   3          }
 224   2        }
 225   1      }
 226          
 227          
 228          
 229          
 230          
 231          
 232          /***********************************************************************
 233            *
 234            * @FunctionName   Interrupt_Process
 235            * 
 236          ***/
 237          void Interrupt_Process(void) interrupt 7
 238          {
 239   1        /* To Check the device have or not connect to the net */
 240   1        if (PORT_DEV_ADD == SET)    NetStatus = NET_DISCONNECT;
C51 COMPILER V9.52.0.0   DATA_PROCESS                                                      07/07/2017 16:24:44 PAGE 5   

 241   1        else                        NetStatus = NET_CONNECT;
 242   1        
 243   1        
 244   1        //Tamper
 245   1        if ((PIF & 0x80) == 0x80)
 246   1        {
 247   2          if (PORT_TAMPER == RESET)   TamperStatus = TAMPER_CLOSE;
 248   2          else                        TamperStatus = TAMPER_OPEN;
 249   2        }
 250   1        
 251   1        
 252   1        //Sensor
 253   1        if ((PIF & 0x10) == 0x10)
 254   1        {
 255   2      //    if (PORT_SENSOR == RESET) SensorStatus  = SENSOR_OPEN;
 256   2      //    else                      SensorStatus  = SENSOR_CLOSE;
 257   2        }
 258   1        
 259   1        
 260   1        
 261   1        
 262   1        //Clear
 263   1        PIF = 0x0;
 264   1      }
 265          
 266          
 267          /***********************************************************************
 268            *
 269            * @FunctionName   WKT_Interrupt
 270            * 
 271          ***/
 272          void WKT_Interrupt(void) interrupt 17
 273          {
 274   1        WKCON &= ~(BIT3 | BIT4);
 275   1        
 276   1        TrigForbidFlag = FALSE;
 277   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    330    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
