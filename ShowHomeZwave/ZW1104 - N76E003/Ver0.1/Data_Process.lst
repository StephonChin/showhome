C51 COMPILER V9.52.0.0   DATA_PROCESS                                                      04/18/2017 10:46:36 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE DATA_PROCESS
OBJECT MODULE PLACED IN Data_Process.obj
COMPILER INVOKED BY: C:\Keil51\C51\BIN\C51.EXE Source\Data_Process.c BROWSE INCDIR(.\Include) DEBUG OBJECTEXTEND PRINT(.
                    -\Data_Process.lst) TABS(2) OBJECT(Data_Process.obj)

line level    source

   1          /*******************************************************************
   2            *
   3            * @FileName   Data_Process.c
   4            * @Date       2017.03.03
   5            * @Author     DS.Chin
   6            *
   7          *********************************************************************/
   8          #include "Data_Process.h"
   9          
  10          /* @Gloable Variables --------------------------------------*/
  11          _Flag NetChgFlag;
  12          
  13          
  14          /* @File Variables -----------------------------------------*/
  15          static _Flag  TamperCloseFlag;
  16          static _Flag  ConnectFlag;
  17          static _Flag  SensorFlag;
  18          static _Flag  PowerOnFlag;
  19          enum
  20          {
  21            SENSOR_IDLE,
  22            SENSOR_CLOSE,
  23            SENSOR_OPEN
  24          }SensorStatus;
  25          
  26          enum
  27          {
  28            TAMPER_IDLE,
  29            TAMPER_CLOSE,
  30            TAMPER_OPEN
  31          }TamperStatus;
  32          
  33          enum
  34          {
  35            NET_IDLE,
  36            NET_CONNECT,
  37            NET_DISCONNECT
  38          }NetStatus,NetPreStatus;
  39          
  40          
  41          
  42          
  43          /***********************************************************************
  44            *
  45            * @FunctionName Power_On_Init
  46            *
  47          ***/
  48          void Power_On_Init(void)
  49          {
  50   1        /* To Check the device have or not connect to the net */
  51   1        if (PORT_DEV_ADD == SET)    NetStatus = NET_DISCONNECT;
  52   1        else                        NetStatus = NET_CONNECT;
  53   1        
  54   1        /* Tamper status check */
C51 COMPILER V9.52.0.0   DATA_PROCESS                                                      04/18/2017 10:46:36 PAGE 2   

  55   1        if (PORT_TAMPER == RESET)   TamperStatus = TAMPER_CLOSE;
  56   1        else                        TamperStatus = TAMPER_OPEN;
  57   1        
  58   1        /* Check Sensor status */
  59   1        if (PORT_SENSOR == RESET) SensorStatus  = SENSOR_OPEN;
  60   1        else                      SensorStatus  = SENSOR_CLOSE;
  61   1        
  62   1        NetPreStatus = NetStatus;
  63   1        PowerOnFlag = TRUE;
  64   1      }
  65          
  66          
  67          
  68          
  69          
  70          
  71          /***********************************************************************
  72            *
  73            * @FunctionName Data_Process
  74            *
  75          ***/
  76          void Data_Process(void)
  77          {
  78   1        static _Uint8 ShakeTime;
  79   1        static _Flag  ShakeFlag;
  80   1        
  81   1        /* to check the net status, change mode to G-FAST when connected, & to */
  82   1        /* RGB-SLOWLY when disconnected */
  83   1        if (NetStatus != NET_IDLE)
  84   1        {
  85   2          ShakeTime++;
  86   2          if (ShakeTime > 2)
  87   2          {
  88   3            ShakeTime = 0;
  89   3            
  90   3            if (NetStatus == NET_CONNECT && PORT_DEV_ADD == RESET && NetPreStatus == NET_DISCONNECT)
  91   3            {
  92   4              ShakeFlag         = TRUE;
  93   4              ConnectFlag       = TRUE;
  94   4              LedData.ModeBuf   = LED_G_FAST;
  95   4              if (PowerOnFlag != TRUE)      NetChgFlag = TRUE;
  96   4              NetPreStatus = NetStatus;
  97   4            }
  98   3            else if (NetStatus == NET_DISCONNECT && PORT_DEV_ADD == SET && NetPreStatus == NET_CONNECT)
  99   3            {
 100   4              ShakeFlag         = TRUE;
 101   4              ConnectFlag       = FALSE;
 102   4              LedData.ModeBuf   = LED_RGB_SLOW;
 103   4              NetPreStatus = NetStatus;
 104   4            }
 105   3      
 106   3            if (ShakeFlag == TRUE)
 107   3            {
 108   4              ShakeFlag = FALSE;
 109   4              
 110   4              // get mode & set init Flag
 111   4              LedData.Mode      = LedData.ModeBuf;
 112   4              LedData.InitFlag  = TRUE;
 113   4            }
 114   3            // clear status
 115   3            PowerOnFlag = FALSE;
 116   3            NetStatus = NET_IDLE;
C51 COMPILER V9.52.0.0   DATA_PROCESS                                                      04/18/2017 10:46:36 PAGE 3   

 117   3          }
 118   2        }
 119   1        else
 120   1        {
 121   2          ShakeTime   = 0;
 122   2          ShakeFlag   = FALSE;
 123   2        }
 124   1      
 125   1        
 126   1        
 127   1        
 128   1        
 129   1        /* have not connect to the net , keep the mode as RGB flash slowly when */
 130   1        /* Tamper tirg. Keep Off mode when sensor trig */
 131   1        if (ConnectFlag == FALSE)
 132   1        {
 133   2          /* check the tamper status */
 134   2          if (TamperStatus != TAMPER_IDLE)
 135   2          {
 136   3            if (TamperStatus == TAMPER_CLOSE)
 137   3            {
 138   4              TamperCloseFlag = TRUE;
 139   4              LedData.ModeBuf = LED_RGB_OFF;
 140   4            }
 141   3            else
 142   3            {
 143   4              TamperCloseFlag = FALSE;
 144   4              LedData.ModeBuf = LED_RGB_SLOW;
 145   4            }
 146   3            
 147   3            // get mode & set init flag
 148   3            LedData.Mode      = LedData.ModeBuf;
 149   3            LedData.InitFlag  = TRUE;
 150   3            WakeUpMode        = 1;
 151   3            WakeUpInit        = TRUE;
 152   3              
 153   3            // clear status
 154   3            TamperStatus = TAMPER_IDLE;
 155   3          }
 156   2        }
 157   1        
 158   1        
 159   1        
 160   1        
 161   1        
 162   1        /* when device connected to the net, change mode to B-SLOW when tamper trig */
 163   1        /* and to R-SLOW when tamper closed and sensor trig */
 164   1        else if (NetChgFlag == FALSE)
 165   1        {
 166   2          /* check the tamper status */
 167   2          if (TamperStatus != TAMPER_IDLE)
 168   2          {
 169   3            if (TamperStatus == TAMPER_CLOSE)
 170   3            {
 171   4              TamperCloseFlag = TRUE;
 172   4              LedData.ModeBuf = LED_RGB_OFF;
 173   4            }
 174   3            else
 175   3            {
 176   4              TamperCloseFlag = FALSE;
 177   4              LedData.ModeBuf = LED_B_SLOW;
 178   4            }
C51 COMPILER V9.52.0.0   DATA_PROCESS                                                      04/18/2017 10:46:36 PAGE 4   

 179   3            
 180   3            // get the mode and set init flag
 181   3            LedData.Mode      = LedData.ModeBuf;
 182   3            LedData.InitFlag  = TRUE;
 183   3            WakeUpMode        = 1;
 184   3            WakeUpInit        = TRUE;
 185   3            
 186   3            // clear status
 187   3            TamperStatus = TAMPER_IDLE;
 188   3          }
 189   2          
 190   2          
 191   2          
 192   2          /* check the sensor status when tamper closed */
 193   2          if (TamperCloseFlag == TRUE)
 194   2          {
 195   3            if (SensorStatus != SENSOR_IDLE)
 196   3            {
 197   4              if (SensorStatus == SENSOR_CLOSE)   
 198   4              {
 199   5                SensorFlag    = TRUE;
 200   5                LedData.Mode  = LED_R_SLOW;
 201   5                TriggerMode   = 1;
 202   5              }
 203   4              else                                
 204   4              {
 205   5                SensorFlag    = FALSE;
 206   5                LedData.Mode  = LedData.ModeBuf;
 207   5                TriggerMode   = 0;
 208   5              }
 209   4              
 210   4              //get the mode and set init flag
 211   4              LedData.InitFlag  = TRUE;
 212   4              WakeUpMode        = 1;
 213   4              WakeUpInit        = TRUE;
 214   4              
 215   4              //clear status
 216   4              SensorStatus = SENSOR_IDLE;
 217   4            }
 218   3            else if (SensorFlag == TRUE)
 219   3            {
 220   4              if (LedData.Mode != LED_R_SLOW)
 221   4              {
 222   5                LedData.Mode      = LED_R_SLOW;
 223   5                LedData.InitFlag  = TRUE;
 224   5              }
 225   4            }
 226   3          }
 227   2        }
 228   1      }
 229          
 230          
 231          
 232          
 233          
 234          
 235          /***********************************************************************
 236            *
 237            * @FunctionName   Interrupt_Process
 238            * 
 239          ***/
 240          void Interrupt_Process(void) interrupt 7
C51 COMPILER V9.52.0.0   DATA_PROCESS                                                      04/18/2017 10:46:36 PAGE 5   

 241          {
 242   1        //Device Add
 243   1        if ((PIF & 0x20) == 0x20)
 244   1        {
 245   2          if (PORT_DEV_ADD == SET)    NetStatus   = NET_DISCONNECT;
 246   2          else                        NetStatus   = NET_CONNECT;
 247   2        }
 248   1        
 249   1        
 250   1        //Tamper
 251   1        if ((PIF & 0x80) == 0x80)
 252   1        {
 253   2          if (PORT_TAMPER == RESET)   TamperStatus = TAMPER_CLOSE;
 254   2          else                        TamperStatus = TAMPER_OPEN;
 255   2        }
 256   1        
 257   1        
 258   1        //Sensor
 259   1        if ((PIF & 0x10) == 0x10)
 260   1        {
 261   2          if (PORT_SENSOR == RESET) SensorStatus  = SENSOR_OPEN;
 262   2          else                      SensorStatus  = SENSOR_CLOSE;
 263   2        }
 264   1        
 265   1        
 266   1        //Clear
 267   1        PIF = 0x0;
 268   1      }
 269          
 270          
 271          /***********************************************************************
 272            *
 273            * @FunctionName   WKT_Interrupt
 274            * 
 275          ***/
 276          void WKT_Interrupt(void) interrupt 17
 277          {
 278   1        WKCON &= ~BIT4;
 279   1        
 280   1        LedData.Mode      = LedData.ModeBuf;
 281   1        LedData.InitFlag  = TRUE;
 282   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    353    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
